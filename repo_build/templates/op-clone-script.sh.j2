#!/usr/bin/env bash
set -vea

# Clone a git repository / Update git repository.
function git_clone {
    repo="$1"
    dest="$2"
    version="$3"

    # If the git repository directory is locally found the function will ensure
    # the origin remote matches the expected URL. If the remote URL does not
    # match then it will be set to the expected value.
    # Once the remotes are satisfied all refs will be fetched.
    if [ -d "$dest/.git" ];then
        pushd $dest
            if ! git remote -v | grep -q "^origin"; then
                git remote add origin "${repo}"
            elif ! git remote -v | grep -q "^origin.* ${repo}"; then
                git remote set-url origin "${repo}"
            fi
            if [ "${version}" == "master" ]; then
              # For the version 'master', always do a fetch
              git fetch --all
            elif ! git checkout ${version}; then
              # Only do a fetch if the repo doesn't have the version we need
              git fetch --all
            fi
            git clean -f -d
            git gc --auto
        popd

    # If the local target directory is not a valid git repository it will be removed and cloned.
    elif [ -d "$dest" ];then
        rm -rf "$dest"
        git clone "$repo" "$dest"
    else  # If the local target directory does not exist it will be cloned.
        git clone "$repo" "$dest"
    fi

    # The version passed to the function will be checked out.
    pushd "$dest"
      git checkout $version
    popd
}

if [ -f /etc/environment ]; then
    source /etc/environment
fi

PID=()
# Run the git clone. This will loop over all of the package parts and clone all known repositories.
{% for item in local_packages.results.0.item.remote_package_parts %}
{%   set _host_group = item['project_group'] | default('all') %}
{%   if ((groups[_host_group] is defined) and (groups[_host_group] | length > 0)) %}
{%     set _clone_repo = True %}
{%   else %}
{%     set _clone_repo = False %}
{%   endif %}
{%   if (not repo_build_git_selective | bool) or (_clone_repo | bool) %}
#  Clone ops are done in parallel at a count of the known "ansible_processor_count" or using a default of 5.
git_clone "{{ item['url'] }}" "{{ repo_build_git_dir }}/{{ item['name'] }}" "{{ item['version'] }}" &
pid[{{ loop.index }}]=$!
{%     if loop.index is divisibleby(repo_build_concurrency | int) or loop.last %}
for job_pid in ${!pid[@]}; do
    wait ${pid[$job_pid]} || exit 99
done
{%     endif %}
{%   endif %}
{% endfor %}
